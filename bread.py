# -*- coding: utf-8 -*-
"""bread.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nrEPsm_g-KjWV9NJfB4fhkGtd47UpQeK
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# New Section"""

data = pd.read_csv("bread_basket.csv")



print('DataFrame shape :', data.shape)

data.head()

#memformat waktu
data['date_time'] = pd.to_datetime(data['date_time'], format='%d-%m-%Y %H:%M')
data['date_time'].dtype

data['month'] = data['date_time'].dt.month
data['day'] = data['date_time'].dt.weekday
data['hour'] = data['date_time'].dt.hour
data.head()

plt.figure(figsize = (13,5))
sns.set_palette("muted")
sns.barplot(x=data["Item"].value_counts()[:10].index,
            y=data["Item"].value_counts()[:10].values )
plt.xlabel("")
plt.ylabel("")
plt.xticks(size=13, rotation = 45)
plt.title("1o Produk yang paling laris", size = 17)
plt.show()

#transaksi bulanan
data_perbulan = data.groupby("month")['Transaction'].count()
data_perbulan = pd.concat([data_perbulan.iloc[4:], data_perbulan.iloc[:4]])

plt.figure(figsize = (8,5))
sns.barplot(
    x = ["October", "November", "December", "January", "February", "March", "April"],
    y = data_perbulan.values, color = "#D5AAD3"
)
plt.xticks(size = 12, rotation = -30 )
plt.title("Jumlah transaksi tiap bulan dari oktober - april", size = 16)

# Transaksi per hari
data_perday = data.groupby('day')['Transaction'].count()

plt.figure(figsize= (8,5))
sns.barplot(
    x = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
    y = data_perday.values, color="#BFFCC6")
plt.xticks(size = 12, rotation = -30)
plt.title("Jumlah transaksi per hari", size = 16)

# Transaksi Tiap Jam
data_perhour = data.groupby('hour')['Transaction'].count()

plt.figure(figsize= (12,6))
sns.barplot(
    x = data_perhour.index,
    y = data_perhour.values, color="#85E3FF")
plt.xlabel('Hour', size = 15)
plt.title("Total Transaksi per jam", size = 17)
plt.xticks(size = 13)
plt.show()

data["Item"] = data["Item"].apply(lambda item: item.lower())
data["Item"] = data["Item"].apply(lambda item: item.strip())
data = data[["Transaction", "Item"]].copy()
data.head(10)

from mlxtend.frequent_patterns import association_rules, apriori

item_count = data.groupby(["Transaction","Item"])["Item"].count().reset_index(name = "Count")
item_count.head()

item_count_pivot = item_count.pivot_table(index="Transaction", columns = "Item",
                                          values = "Count", aggfunc = "sum").fillna(0)
print("Ukuran dataset : ", item_count_pivot.shape)

item_count_pivot = item_count_pivot.astype("int32")
item_count_pivot.head()

def encode(x):
  if x <= 0:
    return 0
  elif x >= 1 :
    return 1


item_count_pivot = item_count_pivot.applymap(encode)
item_count_pivot.head()

print("Ukuran dataset :", item_count_pivot.shape)
print("Jumlah transaksi : ", item_count_pivot.shape[0])
print("Jumlah items :", item_count_pivot.shape[1])

support = 0.01
frequent_items = apriori(item_count_pivot, min_support = support , use_colnames= True)
frequent_items.sort_values("support", ascending = False).head(10)

metric = "lift"
min_threshold = 1
rules = association_rules(frequent_items, metric=metric, min_threshold = min_threshold)[["antecedents", "consequents","support","confidence","lift"]]
rules.sort_values('confidence', ascending = False, inplace = True)
rules.head(15)

